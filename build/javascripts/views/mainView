(function() {

  window.App.Views.MainView = Backbone.View.extend({
    initialize: function(options) {
      this.canvas = options.canvas;
      this.lineCanvas = options.lineCanvas;
      return this.characterCanvas = options.characterCanvas;
    },
    events: {
      'mousemove #canvas': 'updatePickerColor',
      'click #invert': 'invert',
      'click #grayscale_average': 'grayscaleByAverage',
      'click #grayscale_luminosity': 'grayscaleByLuminosity',
      'click #restore': 'restore',
      'click #blur': 'blur',
      'click #colorSegment': 'colorSegmentation',
      'click #segment': 'segment',
      'click #showNextSegment': 'showNextSegment',
      'click #segmentVertical': 'segmentVertical',
      'click #showNextCharacter': 'showNextCharacter',
      'change .imageSelect': 'changeImage'
    },
    changeImage: function(e) {
      return canvas.loadImage(e.currentTarget.value);
    },
    updatePickerColor: function(e) {
      var pixel;
      pixel = this.canvas.imageData.getPixel(e.pageY, e.pageX);
      this.$('#picker').css('background-color', pixel.hex());
      this.$('#picker').text(pixel.hex());
      return this.$('#picker').css('color', pixel.inverse().hex());
    },
    invert: function() {
      return this.canvas.inverse();
    },
    blur: function() {
      return this.canvas.blur();
    },
    grayscaleByAverage: function() {
      return this.canvas.grayscaleByAverage();
    },
    grayscaleByLuminosity: function() {
      return this.canvas.grayscaleByLuminosity();
    },
    segment: function() {
      return this.canvas.segmentImage();
    },
    colorSegmentation: function() {
      return this.canvas.segment(200, 255, 255);
    },
    showNextSegment: function() {
      var lineImage;
      lineImage = this.canvas.findNextLine();
      return this.lineCanvas.showImage(lineImage);
    },
    segmentVertical: function() {
      return this.lineCanvas.segmentVertical();
    },
    showNextCharacter: function() {
      var result;
      result = this.lineCanvas.findNextCharacter();
      return this.characterCanvas.showImage(result);
    },
    restore: function() {
      return this.canvas.restore();
    }
  });

}).call(this);

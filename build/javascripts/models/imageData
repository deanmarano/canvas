(function() {

  App.Models.ImageData = (function() {

    function ImageData(imageData) {
      this.imageData = imageData;
    }

    ImageData.prototype.width = function() {
      return this.imageData.width;
    };

    ImageData.prototype.height = function() {
      return this.imageData.height;
    };

    ImageData.prototype.data = function() {
      return this.imageData.data;
    };

    ImageData.prototype.getAllPixels = function() {
      var column, pixels, row, _i, _j, _ref, _ref1;
      pixels = [];
      for (row = _i = 0, _ref = this.imageData.height; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.imageData.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          pixels.push(this.getPixel(row, column));
        }
      }
      return pixels;
    };

    ImageData.prototype.eachPixel = function(fn) {
      var pixel, _i, _len, _ref, _results;
      _ref = this.getAllPixels();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pixel = _ref[_i];
        _results.push(this.setPixel(fn.call(this, pixel)));
      }
      return _results;
    };

    ImageData.prototype.getPixel = function(row, column, raiseError) {
      var data, pixelStart;
      if (raiseError == null) {
        raiseError = true;
      }
      try {
        this.checkPixelBounds(row, column);
      } catch (e) {
        if (raiseError) {
          throw e;
        } else {
          if (row < 0) {
            row = 0;
          }
          if (column < 0) {
            column = 0;
          }
          if (row > this.imageData.height) {
            row = this.imageData.height;
          }
          if (column > this.imageData.width) {
            column = this.imageData.width;
          }
        }
      }
      data = this.imageData.data;
      pixelStart = this.startValueForPixel(row, column);
      return new App.Models.Pixel(data[pixelStart], data[pixelStart + 1], data[pixelStart + 2], data[pixelStart + 3], pixelStart, row, column);
    };

    ImageData.prototype.checkPixelBounds = function(row, column) {
      if (!((0 <= row && row < this.imageData.height))) {
        throw "out of row bounds (got " + row + " out of " + this.imageData.height + ")";
      }
      if (!((0 <= column && column < this.imageData.width))) {
        throw "out of column bounds (got " + column + " out of " + this.imageData.width + ")";
      }
    };

    ImageData.prototype.startValueForPixel = function(row, column) {
      return (row * (this.imageData.width * 4)) + (column * 4);
    };

    ImageData.prototype.setPixel = function(pixel) {
      var data;
      data = this.imageData.data;
      if (pixel == null) {
        return;
      }
      if (pixel.start == null) {
        pixel.start = this.startValueForPixel(pixel.row, pixel.column);
      }
      data[pixel.start] = pixel.red;
      data[pixel.start + 1] = pixel.green;
      data[pixel.start + 2] = pixel.blue;
      return data[pixel.start + 3] = pixel.alpha;
    };

    ImageData.prototype.get3x3Neighborhood = function(centerRow, centerColumn, size) {
      var result;
      if (size == null) {
        size = 3;
      }
      result = this.createSquareMatrix(size);
      result[0][0] = this.getPixel(centerRow - 1, centerColumn - 1, false);
      result[0][1] = this.getPixel(centerRow - 1, centerColumn, false);
      result[0][2] = this.getPixel(centerRow - 1, centerColumn + 1, false);
      result[1][0] = this.getPixel(centerRow, centerColumn - 1, false);
      result[1][1] = this.getPixel(centerRow, centerColumn, false);
      result[1][2] = this.getPixel(centerRow, centerColumn + 1, false);
      result[2][0] = this.getPixel(centerRow + 1, centerColumn - 1, false);
      result[2][1] = this.getPixel(centerRow + 1, centerColumn, false);
      result[2][2] = this.getPixel(centerRow + 1, centerColumn + 1, false);
      return result;
    };

    ImageData.prototype.createSquareMatrix = function(size) {
      var matrix, row, _i, _results;
      matrix = [];
      _results = [];
      for (row = _i = 0; 0 <= size ? _i < size : _i > size; row = 0 <= size ? ++_i : --_i) {
        _results.push(matrix[row] = []);
      }
      return _results;
    };

    ImageData.prototype.setNeighborhood = function(neighborhood, values) {
      var column, pixel, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = neighborhood.length; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = neighborhood[row].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            pixel = neighborhood[row][column];
            pixel.setAllValues(values[row][column]);
            _results1.push(this.setPixel(pixel));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return ImageData;

  })();

}).call(this);
